import Head from "next/head"
import { Fragment, useState, useMemo, useEffect } from "react"
import { Dialog, Transition } from "@headlessui/react"
import { XMarkIcon } from "@heroicons/react/24/outline"
import { FunnelIcon } from "@heroicons/react/20/solid"
import { useRouter } from "next/router"
import axios from "axios"

export default function Home() {
  const router = useRouter()

  const [mobileFiltersOpen, setMobileFiltersOpen] = useState(false)
  const [templates, setTemplates] = useState([])
  const [filter, setFilter] = useState("all")
  const [categories, setCategories] = useState<string[]>([])

  useEffect(() => {
    if (router.query.id === undefined) return
    const data = async () => {
      try {
        const savedTemplate = await axios.get(
          `https://query-management-system.vercel.app/template/get-by-category/${router.query.id}`
        )
        setTemplates(savedTemplate.data)
      } catch (error) {
        console.log("ðŸš€ ~ file: [id].tsx:22 ~ data ~ error", error)
      }
    }
    data()
  }, [router.query.id])

  function handleOpen({ id }: any) {
    router.push(`/query/${id}`)
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="bg-white">
        {/* Mobile filter dialog */}
        <Transition.Root show={mobileFiltersOpen} as={Fragment}>
          <Dialog as="div" className="relative z-40 lg:hidden" onClose={setMobileFiltersOpen}>
            <Transition.Child
              as={Fragment}
              enter="transition-opacity ease-linear duration-300"
              enterFrom="opacity-0"
              enterTo="opacity-100"
              leave="transition-opacity ease-linear duration-300"
              leaveFrom="opacity-100"
              leaveTo="opacity-0"
            >
              <div className="fixed inset-0 bg-black bg-opacity-25" />
            </Transition.Child>

            <div className="fixed inset-0 z-40 flex">
              <Transition.Child
                as={Fragment}
                enter="transition ease-in-out duration-300 transform"
                enterFrom="translate-x-full"
                enterTo="translate-x-0"
                leave="transition ease-in-out duration-300 transform"
                leaveFrom="translate-x-0"
                leaveTo="translate-x-full"
              >
                <Dialog.Panel className="relative ml-auto flex h-full w-full max-w-xs flex-col overflow-y-auto bg-white py-4 pb-12 shadow-xl">
                  <div className="flex items-center justify-between px-4">
                    <h2 className="text-lg font-medium text-gray-900">Filters</h2>
                    <button
                      type="button"
                      className="-mr-2 flex h-10 w-10 items-center justify-center rounded-md bg-white p-2 text-gray-400"
                      onClick={() => setMobileFiltersOpen(false)}
                    >
                      <span className="sr-only">Close menu</span>
                      <XMarkIcon className="h-6 w-6" aria-hidden="true" />
                    </button>
                  </div>

                  {/* Filters */}
                  <form className="mt-4 border-t border-gray-200">
                    <h3 className="sr-only">Categories</h3>
                    <ul role="list" className="px-2 py-3 font-medium text-gray-900">
                      <li>
                        <span onClick={() => setFilter("all")} className="block px-2 py-3">
                          All
                        </span>
                      </li>
                      {categories.map((item: any, index) => (
                        <li key={index}>
                          <span onClick={() => setFilter(item)} className="block px-2 py-3">
                            {item}
                          </span>
                        </li>
                      ))}
                    </ul>
                  </form>
                </Dialog.Panel>
              </Transition.Child>
            </div>
          </Dialog>
        </Transition.Root>

        <main className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
          <div className="flex items-baseline justify-between border-b border-gray-200 pt-12 pb-6">
            <h1 className="text-4xl font-bold tracking-tight capitalize text-gray-900">
              {router.query.id} Templates
            </h1>
          </div>

          <section aria-labelledby="products-heading" className="pt-8 pb-24 mx-5">
            <div className="grid grid-cols-1 gap-x-8 gap-y-10 lg:grid-cols-4">
              <div className="lg:col-span-4">
                <div className="mt-6 space-y-12 lg:grid lg:grid-cols-3 lg:gap-x-6 lg:space-y-0">
                  {templates.map((template: any) => {
                    {
                      if (filter === "all") {
                        return (
                          <div
                            key={template.name}
                            className="group relative mb-7"
                            onClick={() => handleOpen({ id: template._id })}
                          >
                            <div className="relative h-80 w-full overflow-hidden shadow-lg rounded bg-white group-hover:opacity-75 sm:aspect-w-2 sm:aspect-h-1 sm:h-64 lg:aspect-w-1 lg:aspect-h-1">
                              <img
                                src={template.imageSrc}
                                alt={template.imageAlt}
                                className="h-full w-full object-cover object-center"
                              />
                            </div>
                            <p
                              className="mt-6 text-sm text-gray-500"
                              onClick={() => handleOpen({ id: template._id })}
                            >
                              <span className="absolute inset-0" />
                              {template.description}
                            </p>
                            <h3 className="text-base font-semibold text-gray-900">
                              {template.name}
                            </h3>
                          </div>
                        )
                      }
                      if (template?.category === filter) {
                        return (
                          <div
                            key={template.name}
                            className="group relative mb-7"
                            onClick={handleOpen}
                          >
                            <div className="relative h-80 w-full overflow-hidden rounded-lg bg-white group-hover:opacity-75 sm:aspect-w-2 sm:aspect-h-1 sm:h-64 lg:aspect-w-1 lg:aspect-h-1">
                              <img
                                src={template.imageSrc}
                                alt={template.imageAlt}
                                className="h-full w-full object-cover object-center"
                              />
                            </div>
                            <h3 className="mt-6 text-sm text-gray-500" onClick={handleOpen}>
                              <span className="absolute inset-0" />
                              {template.name}
                            </h3>
                            <p className="text-base font-semibold text-gray-900">
                              {template.description}
                            </p>
                          </div>
                        )
                      }
                    }
                  })}
                </div>
              </div>
            </div>
          </section>
        </main>
      </main>
    </>
  )
}
